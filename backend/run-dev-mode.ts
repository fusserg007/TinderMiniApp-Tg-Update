import { config } from "dotenv";
import { ExpressHttpServer } from "./infra/express-http-server";
import { DI } from "./infra/di";
import { MongoStore } from "./infra/mongo-store";
import cors from 'cors'; // Import CORS

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
async function startServer() {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const result = config({ path: '../.env' });
    console.log("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª:", result.parsed ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞");
    console.log("üìç –ü—É—Ç—å –∫ .env:", result.parsed ? "../env –Ω–∞–π–¥–µ–Ω" : "../env –Ω–µ –Ω–∞–π–¥–µ–Ω");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
      'MONGODB_URI',
      'MONGODB_DATABASE',
      'BOT_TOKEN'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    if (missingVars.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars);
      process.exit(1);
    }

    console.log("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", {
      BOT_TOKEN: process.env.BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      BACKEND_URL: process.env.BACKEND_URL || 'http://localhost:4000',
      MONGODB_URI: process.env.MONGODB_URI ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      MONGODB_DATABASE: process.env.MONGODB_DATABASE,
      PORT: process.env.PORT || '4000'
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB...');
    const mongoStore = new MongoStore();
    await mongoStore.connect();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    DI.setMany({
      store: mongoStore,
    });

    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    const port = Number(process.env.PORT) || 4000;
    const server = new ExpressHttpServer();

    // Enable CORS
    server.app.use(cors({
      origin: ['http://localhost:5173', 'http://0.0.0.0:5173', 'https://*.replit.dev', 'https://*.repl.co'],
      credentials: true
    }));

    server.listen(port, '0.0.0.0', () => {
      console.log(`üöÄ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}!`);
      console.log(`üì± Telegram Bot: ${process.env.BOT_USERNAME || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
      console.log(`üåê Backend URL: ${process.env.BACKEND_URL || `http://localhost:${port}`}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      await mongoStore.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      await mongoStore.disconnect();
      process.exit(0);
    });

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();
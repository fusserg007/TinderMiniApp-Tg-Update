import { config } from "dotenv";
import { ExpressHttpServer } from "./infra/express-http-server";
import { DI } from "./infra/di";
import { MongoStore } from "./infra/mongo-store";
import cors from 'cors'; // Import CORS

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
async function startServer() {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const result = config({ path: './.env' });
    console.log("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª:", result.parsed ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞");
    console.log("üìç –ü—É—Ç—å –∫ .env:", result.parsed ? "./env –Ω–∞–π–¥–µ–Ω" : "./env –Ω–µ –Ω–∞–π–¥–µ–Ω");

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (!process.env.MONGODB_URI) {
      process.env.MONGODB_URI = 'mongodb://localhost:27017/tinder';
    }
    if (!process.env.MONGODB_DATABASE) {
      process.env.MONGODB_DATABASE = 'tinder';
    }
    if (!process.env.BOT_TOKEN) {
      process.env.BOT_TOKEN = '7707911390:AAGX3E6XADNiLGfkxflBnoNgH0E1yINaHPc';
    }
    if (!process.env.PORT) {
      process.env.PORT = '4000';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = [
      'BOT_TOKEN'
    ];

    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    if (missingVars.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars);
      process.exit(1);
    }

    console.log("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", {
      BOT_TOKEN: process.env.BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      BACKEND_URL: process.env.BACKEND_URL || 'http://localhost:4000',
      MONGODB_URI: process.env.MONGODB_URI ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      MONGODB_DATABASE: process.env.MONGODB_DATABASE,
      PORT: process.env.PORT || '4000'
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB...');
    let mongoStore: MongoStore | null = null;
    
    try {
      mongoStore = new MongoStore();
      await mongoStore.connect();
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', (error as Error).message);
      console.log('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (mongoStore) {
      DI.setMany({
        store: mongoStore,
      });
    }

    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    const port = Number(process.env.PORT) || 4000;
    const server = new ExpressHttpServer();

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(port, () => {
      console.log(`üöÄ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}!`);
      console.log(`üì± Telegram Bot: ${process.env.BOT_USERNAME || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
      console.log(`üåê Backend URL: ${process.env.BACKEND_URL || `http://localhost:${port}`}`);
      if (!mongoStore) {
        console.log('‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ë–ï–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (mongoStore) {
        await mongoStore.disconnect();
      }
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      if (mongoStore) {
        await mongoStore.disconnect();
      }
      process.exit(0);
    });

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();